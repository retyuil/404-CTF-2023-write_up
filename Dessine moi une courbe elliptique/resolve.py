
p = 231933770389389338159753408142515592951889415487365399671635245679612352781
X1 = 93808707311515764328749048019429156823177018815962831703088729905542530725 
Y1 = 144188081159786866301184058966215079553216226588404139826447829786378964579
X2 = 139273587750511132949199077353388298279458715287916158719683257616077625421 
Y2 = 30737261732951428402751520492138972590770609126561688808936331585804316784


X1_inv = pow(X1,-1,p)
un_moins_X1_X2 = pow((1-X1_inv*X2),-1,p)

B = un_moins_X1_X2 * (Y2**2 - X2 ** 3 - X2*X1_inv * (Y1**2 - X1**3))
B = B % p 

A = (Y1**2 - X1**3 - B) * X1_inv
A = A % p 

print(Y2**2 % p)
print((X2**3 + A*X2 + B)% p )
print(Y1**2 % p)
print((X1**3 + A*X1 + B)% p )


from Crypto.Cipher import AES
from os import urandom
import hashlib

iv = "00b7822a196b00795078b69fcd91280d"
iv = bytes.fromhex(iv)
FLAG = "8233d04a29befd2efb932b4dbac8d41869e13ecba7e5f13d48128ddd74ea0c7085b4ff402326870313e2f1dfbc9de3f96225ffbe58a87e687665b7d45a41ac22"
FLAG = bytes.fromhex(FLAG)
key = str(A) + str(B)
aes = AES.new(hashlib.sha1(key.encode()).digest()[:16], AES.MODE_CBC, iv=iv)
cipher = aes.decrypt(FLAG)
print(cipher)


